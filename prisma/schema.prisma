// This is your Prisma schema file
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  slug      String    @unique
  excerpt   String?
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  category  Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  tags      Tag[]
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  password    String
  role        String        @default("user")
  email       String?       @unique
  company     String?
  subscriptions Subscription[]
  orders      Order[]
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  slug  String  @unique
  posts Post[]
}

model Tag {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  slug  String  @unique
  posts Post[]
}

model PricingPlan {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  slug        String        @unique
  description String
  setupFee    Float
  monthlyFee  Float
  features    Feature[]
  subscriptions Subscription[]
  active      Boolean       @default(true)
}

model Feature {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  plans       PricingPlan[]
}

model Subscription {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  plan          PricingPlan @relation(fields: [planId], references: [id])
  planId        Int
  startDate     DateTime    @default(now())
  endDate       DateTime?
  status        String      @default("active") // active, cancelled, expired
  autoRenew     Boolean     @default(true)
}

model Order {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  amount        Float
  status        String      // pending, completed, failed
  paymentId     String?     @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    String
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
